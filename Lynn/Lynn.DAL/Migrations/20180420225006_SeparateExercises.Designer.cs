// <auto-generated />
using Lynn.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Lynn.DAL.Migrations
{
    [DbContext(typeof(LynnDb))]
    [Migration("20180420225006_SeparateExercises")]
    partial class SeparateExercises
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lynn.DAL.DbCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Lynn.DAL.DbCourse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Details")
                        .HasMaxLength(100);

                    b.Property<string>("KnownLanguage")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("KnownLanguageTerritory")
                        .HasMaxLength(2);

                    b.Property<string>("LearningLanguage")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("LearningLanguageTerritory")
                        .HasMaxLength(2);

                    b.Property<int?>("LevelID");

                    b.Property<int?>("UserID")
                        .HasColumnName("Editor");

                    b.HasKey("ID");

                    b.HasIndex("LevelID");

                    b.HasIndex("UserID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Lynn.DAL.DbCourseLevel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LevelCode")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("LevelName")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.ToTable("CourseLevel");
                });

            modelBuilder.Entity("Lynn.DAL.DbEnrollment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseID");

                    b.Property<int>("Level");

                    b.Property<int>("Points");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("UserID");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("Lynn.DAL.DbGrammarExercise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("RuleID");

                    b.Property<int>("TestID");

                    b.Property<string>("WrongAnswer1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("WrongAnswer2")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("WrongAnswer3")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("RuleID");

                    b.HasIndex("TestID");

                    b.ToTable("GrammarExercise");
                });

            modelBuilder.Entity("Lynn.DAL.DbLanguage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Lynn.DAL.DbRule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Explanation")
                        .HasMaxLength(200);

                    b.Property<string>("Name");

                    b.Property<string>("TranslatedExplanation")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("ID");

                    b.ToTable("Rule");
                });

            modelBuilder.Entity("Lynn.DAL.DbTerritory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Territory");
                });

            modelBuilder.Entity("Lynn.DAL.DbTest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryID");

                    b.Property<int>("CourseID");

                    b.Property<int>("Level");

                    b.Property<int?>("MaxPoints");

                    b.Property<int?>("NumberOfQuestions");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("CourseID");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("Lynn.DAL.DbTestUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Attempts");

                    b.Property<bool>("IsCorrect");

                    b.Property<int>("TestID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("TestID");

                    b.HasIndex("UserID");

                    b.ToTable("Tryings");
                });

            modelBuilder.Entity("Lynn.DAL.DbUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<int>("Points");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Lynn.DAL.DbVocabularyExercise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Audio")
                        .HasMaxLength(100);

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Picture")
                        .HasMaxLength(100);

                    b.Property<string>("Sentence")
                        .HasMaxLength(100);

                    b.Property<int>("TestID");

                    b.Property<string>("TranslatedExpression")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TranslatedSentence")
                        .HasMaxLength(100);

                    b.Property<string>("TranslatedWrongAnswer1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TranslatedWrongAnswer2")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TranslatedWrongAnswer3")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Video")
                        .HasMaxLength(100);

                    b.Property<string>("WrongAnswer1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("WrongAnswer2")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("WrongAnswer3")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("TestID");

                    b.ToTable("VocabularyExercise");
                });

            modelBuilder.Entity("Lynn.DAL.DbCourse", b =>
                {
                    b.HasOne("Lynn.DAL.DbCourseLevel", "Level")
                        .WithMany("Courses")
                        .HasForeignKey("LevelID");

                    b.HasOne("Lynn.DAL.DbUser", "User")
                        .WithMany("CreatedCourses")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Lynn.DAL.DbEnrollment", b =>
                {
                    b.HasOne("Lynn.DAL.DbCourse", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Lynn.DAL.DbUser", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lynn.DAL.DbGrammarExercise", b =>
                {
                    b.HasOne("Lynn.DAL.DbRule", "Rule")
                        .WithMany("GrammarExercises")
                        .HasForeignKey("RuleID");

                    b.HasOne("Lynn.DAL.DbTest", "Test")
                        .WithMany("GrammarExercises")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lynn.DAL.DbTest", b =>
                {
                    b.HasOne("Lynn.DAL.DbCategory", "Category")
                        .WithMany("Tests")
                        .HasForeignKey("CategoryID");

                    b.HasOne("Lynn.DAL.DbCourse", "Course")
                        .WithMany("Tests")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lynn.DAL.DbTestUser", b =>
                {
                    b.HasOne("Lynn.DAL.DbTest", "Test")
                        .WithMany("UserTests")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Lynn.DAL.DbUser", "User")
                        .WithMany("TestTryings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lynn.DAL.DbVocabularyExercise", b =>
                {
                    b.HasOne("Lynn.DAL.DbTest", "Test")
                        .WithMany("VocabularyExercises")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
